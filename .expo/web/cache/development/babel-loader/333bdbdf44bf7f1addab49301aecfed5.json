{"ast":null,"code":"var _jsxFileName = \"/Users/Keith/Documents/Git/react-native-demo/components/Cube/index.js\";\nimport React, { useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { styles } from \"./styles\";\nexport function Cube() {\n  var pan = useRef(new Animated.ValueXY()).current;\n  var panResponder = useRef(PanResponder.create({\n    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant() {\n      pan.setOffset({\n        x: pan.x._value,\n        y: pan.y._value\n      });\n    },\n    onPanResponderMove: Animated.event([null, {\n      dx: pan.x,\n      dy: pan.y\n    }], {\n      useNativeDriver: true\n    }),\n    onPanResponderRelease: function onPanResponderRelease() {\n      pan.flattenOffset();\n    }\n  })).current;\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        translateX: pan.x\n      }, {\n        translateY: pan.y\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.cube,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/Keith/Documents/Git/react-native-demo/components/Cube/index.js"],"names":["React","useRef","styles","Cube","pan","Animated","ValueXY","current","panResponder","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","setOffset","x","_value","y","onPanResponderMove","event","dx","dy","useNativeDriver","onPanResponderRelease","flattenOffset","transform","translateX","translateY","cube"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;;;;AAEA,SAASC,MAAT;AAEA,OAAO,SAASC,IAAT,GAAgB;AACnB,MAAMC,GAAG,GAAGH,MAAM,CAAC,IAAII,QAAQ,CAACC,OAAb,EAAD,CAAN,CAA+BC,OAA3C;AACA,MAAMC,YAAY,GAAGP,MAAM,CACvBQ,YAAY,CAACC,MAAb,CAAoB;AAChBC,IAAAA,2BAA2B,EAAE;AAAA,aAAM,IAAN;AAAA,KADb;AAEhBC,IAAAA,mBAAmB,EAAE,+BAAM;AACvBR,MAAAA,GAAG,CAACS,SAAJ,CAAc;AACVC,QAAAA,CAAC,EAAEV,GAAG,CAACU,CAAJ,CAAMC,MADC;AAEVC,QAAAA,CAAC,EAAEZ,GAAG,CAACY,CAAJ,CAAMD;AAFC,OAAd;AAIH,KAPe;AAQhBE,IAAAA,kBAAkB,EAAEZ,QAAQ,CAACa,KAAT,CAChB,CAAC,IAAD,EAAO;AAAEC,MAAAA,EAAE,EAAEf,GAAG,CAACU,CAAV;AAAaM,MAAAA,EAAE,EAAEhB,GAAG,CAACY;AAArB,KAAP,CADgB,EAEhB;AAAEK,MAAAA,eAAe,EAAE;AAAnB,KAFgB,CARJ;AAYhBC,IAAAA,qBAAqB,EAAE,iCAAM;AACzBlB,MAAAA,GAAG,CAACmB,aAAJ;AACH;AAde,GAApB,CADuB,CAAN,CAiBnBhB,OAjBF;AAmBA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD,CAAU,IAAV;AACI,IAAA,KAAK,EAAE;AACHiB,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,UAAU,EAAErB,GAAG,CAACU;AAAlB,OAAD,EAAwB;AAAEY,QAAAA,UAAU,EAAEtB,GAAG,CAACY;AAAlB,OAAxB;AADR,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACyB,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,CADJ;AAYH","sourcesContent":["import React, { useRef } from 'react';\nimport { View, Animated, PanResponder } from 'react-native';\nimport { styles } from './styles';\n\nexport function Cube() {\n    const pan = useRef(new Animated.ValueXY()).current;\n    const panResponder = useRef(\n        PanResponder.create({\n            onMoveShouldSetPanResponder: () => true,\n            onPanResponderGrant: () => {\n                pan.setOffset({\n                    x: pan.x._value,\n                    y: pan.y._value\n                });\n            },\n            onPanResponderMove: Animated.event(\n                [null, { dx: pan.x, dy: pan.y }],\n                { useNativeDriver: true }\n            ),\n            onPanResponderRelease: () => {\n                pan.flattenOffset();\n            }\n        })\n    ).current;\n\n    return (\n        <View>\n            <Animated.View\n                style={{\n                    transform: [{ translateX: pan.x }, { translateY: pan.y }]\n                }}\n                // {...panResponder.panHandlers}\n            >\n                <View style={styles.cube} />\n            </Animated.View>\n        </View>\n    )\n}"]},"metadata":{},"sourceType":"module"}